@using System.Security.Cryptography
@using System.Text
@using Newtonsoft.Json.Linq
@model KaCake.ViewModels.Project.IndexViewModel
@using Node = KaCake.ViewModels.Project.IndexViewModel.FileSystemEntry
@functions
{
    JObject createToken()
    {
        var time = DateTime.UtcNow.Ticks / 10000;
        const string secret = "fre1526h6hpk4yan";
        var key = Encoding.UTF8.GetBytes(time.ToString());
        var value = Encoding.UTF8.GetBytes(secret);
        using (var algorithm = new HMACSHA256(value))
        {
            var hash = algorithm.ComputeHash(key);
            string base64 = Convert.ToBase64String(hash);
            return new JObject()
            {
                ["msg_mac"] = base64,
                ["time_created"] = time
            };
        }
    }

    JObject createTree(Node node, string prefix)
    {
        var json = new JObject()
        {
            ["text"] = node.Name,
            ["file"] = prefix
        };
        if (node.IsDirectory)
        {
            json["nodes"] = new JArray(node.SubEntries?.Select(dir => createTree(dir, System.IO.Path.Combine(prefix, dir.Name))));
            json["icon"] = "glyphicon glyphicon-folder-open";
            json["text"] = " " + node.Name;
            json["backColor"] = "#f4b342";
            json["selectable"] = false;
        }
        return json;
    }
}
@{

    ViewBag.Title = "Project";
}
<h2>@Model.TaskGroupName / @Model.TaskVariantName / @Model.UserName (@Model.SubmissionTime)</h2>
<div id="tree"></div>
<div id="list"></div>
<div class="container">
    <button type="submit" id="save_comments" class="btn btn-default">Save</button>
</div>

<div class="navbar-fixed-bottom transpanent-div collapse" id="comment_footer">
    <div class="container">
        <div class="row">
            <form>
                <div class="form-group">
                    <label for="comment">View and edit a comment</label>

                    <textarea id="comment" rows="5"></textarea>
                </div>

                <button type="submit" id="submit_comment" class="btn btn-default">Submit comment</button>
                <button type="reset" id="remove_comment" class="btn btn-default">Remove comment</button>
                <button type="reset" id="cancel_comment" class="btn btn-default">Cancel</button>

            </form>
        </div>
    </div>
</div>

<div class="navbar-fixed-top alert-success collapse" id="comment_submitted_footer">
    <div class="container">
        <div class="block-message">
            All your comments are saved.
        </div>
    </div>
</div>

<div class="navbar-fixed-top alert-success collapse" id="comment_submit_error">
    <div class="container">
        <div class="block-message">
            An error ocurred during saving comments.
        </div>
    </div>
</div>

<samp id="output" style="padding: 5px"></samp>
<ul class="nav nav-tabs"></ul>
<div class="tab-content">
</div>
<div style="height: 300px"></div> <!--Because comments overlays editor-->
@section scripts
{
    <script src="https://repl.it/lib/api.js"></script>
    <script type="text/javascript">
        var langNames = {
            "ace/mode/csharp": "csharp",
            "ace/mode/python": "python3",
            "ace/mode/c_cpp": "cpp11",
            "ace/mode/java": "java"
        };

        var token = @Html.Raw(createToken());
        var repl;

        var tree = @Html.Raw(createTree(Model.Root, "")["nodes"]);

        var modelist = ace.require("ace/ext/modelist");
        var editors = {};
        var tabs = {};
        var comment = null;
        var allComments = [];
        var commentsList = [];
        var files = [];

        var savedVal = "Save";
        var needToSaveVal = "Save *";

        var editor;
        var editorId;

        // Find the comment
        // Returns index of the occurence, -1 otherwise
        var find = function (file, comment) {
            for (var i = 0; i < comments.length; ++i) {
                var c = comments[i];
                if (c.file == file
                    && c.startRow == comment.startRow
                    && c.startPosition == comment.startPosition
                    && c.endRow == comment.endRow
                    && c.endPosition == comment.endPosition)
                {
                    return i;
                }
            }

            return -1;
        };

        var removeCommentAt = function (i) {
            var fileName = comments[i].file;

            comments.splice(i, 1);

            for (var j = 0; j < files.length; ++j) {
                if (files[j] == fileName) {
                    return;
                }
            }

            files.push(fileName);
        }

        var updateCommentsList = function () {
            commentsList = []

            for (var i = 0; i < comments.length; ++i){
                addToCommentsList(comments[i])
            }

            console.log("Updating list");
            $('#list').empty();
                    $('#list').treeview({
                    data: commentsList,
                    onNodeSelected: function (event, data) {
                        $.get("../GetFile/@Model.SubmissionId?file=" + encodeURI(data.comment.file),
                            function (result) {
                                goToTab(data.comment.file, result);
                                showComment(data.comment);
                            }
                        );
                    }
                });
        }

        var showComment = function(c) {
            comment = c;
            $('#comment').val(new String(comment.text));
            showEditComment();
        }

        var hideComment = function () {
            hideEditComment();
        }

        function addToCommentsList(c) {
            var cmnt = {
                text: c.text.length > 80 ? c.text.substr(0, 80) + "..." : c.text,
                icon: "glyphicon glyphicon-comment",
                backColor: "#b4b3a2",
                comment: c
            }
            commentsList.push(cmnt);
        }

        function goToTab(filename, filedata) {
            var a = $(".nav-tabs li").children('a');
            for (var i = 0; i < a.length; ++i) {
                console.log(a[i]);
                var id = $(a[i]).attr('href').substr("#tab_".length);
                if (tabs[id] == filename) {
                    $(a[i]).click();
                    editor = setupEditor("editor_" + id, filename, filedata.text);
                    return;
                }
            }

            createTab(filename, filedata);
        }

        function createTab(name, data) {
            var id = $(".nav-tabs").children().length;
            $(".nav-tabs").append('<li><a href="#tab_' +
                id +
                '">' +
                name +
                '</a><span class="glyphicon glyphicon-remove"></span></li>');
            $(".tab-content").append('<div class="tab-pane" id="tab_' +
                id +
                '"><div id="editor_' +
                id +
                '"></div></div>');

            console.log(data.text);
            editor = setupEditor("editor_" + id, name, data.text);
            tabs[id] = name;

            $('.nav-tabs li').children('a').last().click();

            editor.selection.clearSelection();

            $('#comment_footer').collapse("hide");
        }

        function setupEditor(id, name, dataText) {
            editorId = id;
            editor = ace.edit(id);
            editor.file = name;
            editors[id] = editor;
            editor.$blockScrolling = Infinity;
            editor.setOptions({
                maxLines: Infinity,
                showPrintMargin: false
            });
            var mode = modelist.getModeForPath(name).mode;
            editor.session.setMode(mode);

            var generateUUID = function() {
                var d = new Date().getTime();
                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,
                    function(c) {
                        var r = (d + Math.random() * 16) % 16 | 0;
                        d = Math.floor(d / 16);
                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
                    });
                return uuid;
            };

            var editorComments = [];
            for (var i = 0; i < comments.length; ++i) {
                var c = comments[i];
                if (c.file != editor.file) {
                    continue;
                }

                var ec = new Object();

                ec.startRow = c.startRow;
                ec.startPosition = c.startPosition;
                ec.endRow = c.endRow;
                ec.endPosition = c.endPosition;
                ec.text = c.text;
                ec.file = c.file;

                ec.uuid = generateUUID();

                editor.getSession().addComment(ec);
            }

            editor.getSession().selection.on('changeSelection',
                function(e) {
                    if (!editor.getSelection().isEmpty()) {
                        editNewComment(editor.file, editor.getSelection().getRange());
                    } else {
                        hideEditComment();
                    }
                });

            editor.setValue(dataText);

            return editor;
        }

        function updateEditor() {
            editor = setupEditor(editorId, editor.file, editor.getValue());
            editor.clearSelection();
        }

        function editNewComment(filename, selectionRange) {
            comment = new Object();

            comment.file = filename;
            comment.startRow = selectionRange.start.row;
            comment.startPosition = selectionRange.start.column;
            comment.endRow = selectionRange.end.row;
            comment.endPosition = selectionRange.end.column;

            showEditComment();
            $('#remove_comment').collapse("hide");
        }

        function showEditComment() {
            $('#comment_footer').collapse("show");

            $('#submit_comment').collapse("show");
            $('#cancel_comment').collapse("show");
        }

        function hideEditComment() {
            $("#comment").val('');
            $('#comment_footer').collapse("hide");

            comment = null;
        }

        function saveAllComments() {
            console.log("saving");
            console.log(comments);

            var commentsToSave = {};
            var filesToSave = [];

            for (var i = 0; i < comments.length; ++i) {
                var c = comments[i];

                var file = c.file;
                if (!commentsToSave[file]) {
                    commentsToSave[file] = [];
                    filesToSave.push(file);
                }

                var commentToPush = new Object();

                commentToPush.startRow = c.startRow;
                commentToPush.startPosition = c.startPosition;
                commentToPush.endRow = c.endRow;
                commentToPush.endPosition = c.endPosition;
                commentToPush.text = c.text;

                commentsToSave[file].push(commentToPush);
            }

            var counter = 0;
            
            var emptyFiles = [];
            for (var i = 0; i < files.length; ++i) {
                if (!commentsToSave[files[i]]) {
                    emptyFiles.push(files[i]);
                }
            }

            var callSave = function (file, commentsToSave) {
                $.get("../SaveComments/@Model.SubmissionId?file=" +
                                encodeURI(file) +
                    "&commentsJson=" +
                        encodeURI(JSON.stringify(commentsToSave)),
                    function (result) {
                        counter++;
                        if (counter == filesToSave.length + emptyFiles.length) {
                            console.log(result);
                            $('#comment_submitted_footer').collapse("show");
                            $('#save_comments').text(savedVal);
                            setTimeout(function () {
                                $('#comment_submitted_footer').collapse("hide");
                            }, 3000);
                        }
                    }
                ).fail(function(){
                    $('#comment_submit_error').collapse("show");
                    setTimeout(function () {
                        $('#comment_submit_error').collapse("hide");
                    }, 3000);
                });
            }

            for (var i = 0; i < filesToSave.length; ++i) {
                var file = filesToSave[i];
                callSave(file, commentsToSave[file]);
            }

            for (var i = 0; i < emptyFiles.length; ++i) {
                callSave(emptyFiles[i], []);
            }
        }

        $('body').on('click',
            '#submit_comment',
            function (e) {
                e.preventDefault();

                var exist = (find(comment.file, comment) != -1);

                comment.text = new String($("#comment").val());

                if (!exist) {
                    comments.push(comment);
                }

                updateCommentsList();
                updateEditor();

                $('#save_comments').text(needToSaveVal);
                hideComment();
            });
        $('body').on('click',
            '#remove_comment',
            function (e) {
                e.preventDefault();

                if (!comment) {
                    return;
                }

                var i = find(comment.file, comment);
                if (i != -1) {
                    removeCommentAt(i);
                }

                updateCommentsList();
                updateEditor();

                $('#save_comments').text(needToSaveVal);
            });

        $('body').on('click',
            '.kacake_comment',
            function (event) {
                var comment_uuid = $(this).attr('data-comment-uuid');
                var editorComment = editor.getSession().getComment(comment_uuid);

                var i = find(editor.file, editorComment);
                if (i != -1) {
                    comment = comments[i];
                    showComment(comment);
                }
            });

        $('body').on('click',
            '#cancel_comment',
            function () {
                hideComment();
            });

        $(".nav-tabs").on("click",
                "a",
                function(e) {
                    e.preventDefault();
                    console.log($(this));
                    $(this).tab('show');
                })
            .on("click",
                "span",
                function() {
                    var anchor = $(this).siblings('a');

                    var id = anchor.attr('href').substr("#tab_".length);
                    editor = ace.edit("editor_" + id);
                    editor.destroy();

                    $(anchor.attr('href')).remove();
                    $(this).parent().remove();
                    $(".nav-tabs li").children('a').first().click();
                    delete tabs[id];
                });

        $('body').on('click',
            "#save_comments",
            function (e) {
                console.log("save click");
                saveAllComments();
            }
        );

        $('#tree').treeview({
            data: tree,
            onNodeSelected: function (event, data) {
                console.log("../GetFile/@Model.SubmissionId?file=" + encodeURI(data.file));
                $.get("../GetFile/@Model.SubmissionId?file=" + encodeURI(data.file),
                    function (result) {
                        goToTab(data.file, result);
                    }
                );
            }
        });

        $.get("../GetAllComments/@Model.SubmissionId",
            function (result) {
                comments = result;
                updateCommentsList();
            }
        );

    </script>
}