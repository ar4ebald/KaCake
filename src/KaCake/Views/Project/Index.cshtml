@using System.Security.Cryptography
@using System.Text
@using Newtonsoft.Json.Linq
@model KaCake.ViewModels.Project.IndexViewModel
@using Node = KaCake.ViewModels.Project.IndexViewModel.FileSystemEntry
@functions
{
    JObject createToken()
    {
        var time = DateTime.UtcNow.Ticks / 10000;
        const string secret = "fre1526h6hpk4yan";
        var key = Encoding.UTF8.GetBytes(time.ToString());
        var value = Encoding.UTF8.GetBytes(secret);
        using (var algorithm = new HMACSHA256(value))
        {
            var hash = algorithm.ComputeHash(key);
            string base64 = Convert.ToBase64String(hash);
            return new JObject()
            {
                ["msg_mac"] = base64,
                ["time_created"] = time
            };
        }
    }

    JObject createTree(Node node, string prefix)
    {
        var json = new JObject()
        {
            ["text"] = node.Name,
            ["file"] = prefix
        };
        if (node.IsDirectory)
        {
            json["nodes"] = new JArray(node.SubEntries?.Select(dir => createTree(dir, System.IO.Path.Combine(prefix, dir.Name))));
            json["icon"] = "glyphicon glyphicon-folder-open";
            json["text"] = " " + node.Name;
            json["backColor"] = "#f4b342";
            json["selectable"] = false;
        }
        return json;
    }
}
@{

    ViewBag.Title = "Project";
}

<h2>@Model.TaskGroupName / @Model.TaskVariantName / @Model.UserName (@Model.SubmissionTime)</h2>
<div id="tree"></div>
<div id="list"></div>
<div class="container">
    <button type="submit" id="save_comments" class="btn btn-default collapse">Save</button>
</div>

<div class="navbar-fixed-bottom transpanent-div collapse" id="comment_footer">
    <div class="container">
        <div class="row">
            <form>
                <div class="form-group">
                    @if (Model.UserIsTeacher)
                    {
                        <text>
                            <label for="comment">Edit your comment</label>
                        </text>
                    }
                    else
                    {
                        <text>
                            <label for="comment">View your comment</label>
                        </text>
                    }
                    <textarea id="comment" rows="5"
                              @if (!Model.UserIsTeacher){
                              <text>disabled</text>
                              }
                              ></textarea>
                </div>
                @if (Model.UserIsTeacher)
                {
                <text>
                    <button type="submit" id="submit_comment" class="btn btn-default">Submit comment</button>
                    <button type="reset" id="remove_comment" class="btn btn-default">Remove comment</button>
                    <button type="reset" id="cancel_comment" class="btn btn-default">Cancel</button>
                </text>
                }
            </form>
        </div>
    </div>
</div>

<div class="navbar-fixed-top alert-success collapse" id="comment_submitted_footer">
    <div class="container">
        <div class="block-message">
            All your comments are saved.
        </div>
    </div>
</div>

<samp id="output" style="padding: 5px"></samp>

<ul class="nav nav-tabs"></ul>
<div class="tab-content">
</div>

@section scripts
{
    <script src="https://repl.it/lib/api.js"></script>
    <script type="text/javascript">
        var langNames = {
            "ace/mode/csharp": "csharp",
            "ace/mode/python": "python3",
            "ace/mode/c_cpp": "cpp11",
            "ace/mode/java": "java"
        };

        var token = @Html.Raw(createToken());
        var repl;

        var tree = @Html.Raw(createTree(Model.Root, "")["nodes"]);

        var modelist = ace.require("ace/ext/modelist");
        var editors = {};
        var tabs = {};
        var comment = null;
        var commentsList = [];

        var savedVal = "Save";
        var needToSaveVal = "Save *";

        var editor;

        function writeOutput(text) {
            console.log(text);
            $("#output").append(text.replace(/(\r\n|[\n\r])/gi, "<br/>"));
        }

        var options = { stdout: writeOutput };

        function setupEditor(id, name) {
            editor = ace.edit(id);
            editor.file = name;
            editors[id] = editor;
            editor.$blockScrolling = Infinity;
            editor.setOptions({
                maxLines: Infinity,
                showPrintMargin: false
            });
            var mode = modelist.getModeForPath(name).mode;
            editor.session.setMode(mode);
            editor.commands.addCommand({
                name: "run",
                bindKey: { win: "Ctrl-R", mac: "Command-Option-R" },
                exec: function(editor) {
                    $("#output").text("");
                    if (!repl) {
                        console.log(mode, langNames[mode]);
                        repl = new ReplitClient('api.repl.it', 80, langNames[mode], token);
                        repl.connect().then(
                            function() {
                                repl.evaluate(editor.getValue(), options).then(function success(result) {
                                        writeOutput("\nProgram finished\n");
                                        if (result.error) {
                                            writeOutput(`Error:\n${result.error}\n`);
                                        } else if (result.data) {
                                            writeOutput(`Result:\n${result.data}\n`);
                                        }
                                    },
                                    function(result) {
                                        alert(result);
                                    });
                            },
                            function() { alert("Error connecting to repl") });
                    } else
                        repl.evaluate(editor.getValue(), options);
                }
            });
            editor.commands.addCommand({
                name: "write",
                bindKey: { win: "Ctrl-I", mac: "Command-Option-I" },
                exec: function(editor) {
                    //writeOutput("\n");
                    repl.write(prompt("Inter input:") + "\n");
                }
            });
            editor.commands.addCommand({
                name: "stop",
                bindKey: { win: "Ctrl-P", mac: "Command-Option-P" },
                exec: function(editor) {
                    if (repl) {
                        repl.stop();
                        repl = null;
                    }
                }
            });
            @if (Model.UserIsTeacher)
            {
                <text>
            function save(editor) {
                $.get("../SaveComments/@Model.SubmissionId?file=" +
                                encodeURI(editor.file) +
                                "&commentsJson=" +
                                encodeURI(JSON.stringify(editor.getSession().getComments())),
                                function(result) {
                                    console.log(result);
                                    $('#comment_submitted_footer').collapse("show");
                                    $('#save_comments').text(savedVal);
                                    setTimeout(function () {
                                        $('#comment_submitted_footer').collapse("hide");
                                    }, 3000);
                                });
            };
                    editor.commands.addCommand({
                        name: "save",
                        bindKey: { win: "Ctrl-S", mac: "Command-Option-S" },
                        exec: function (editor) {
                            save(editor);
                        }
            });

                    $('body').on("click", '#save_comments', function (e) {
                        save(editor);
                    });

                    $('#save_comments').collapse("show");

                </text>
            }

            function generateUUID() {
                var d = new Date().getTime();
                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,
                    function(c) {
                        var r = (d + Math.random() * 16) % 16 | 0;
                        d = Math.floor(d / 16);
                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
                    });
                return uuid;
            };

            $('body').on('click',
                '#submit_comment',
                function (e) {
                    e.preventDefault();

                    if (comment) {
                        comment.text = new String($('#comment').val());
                        $('#remove_comment').hide();
                        $('#comment_footer').collapse("hide");
                        comment = null;
                        $('#comment').val("");
                        return;
                    }

                    var selectionRange = editor.getSelection().getRange();

                    comment = new Object();

                    comment.startRow = selectionRange.start.row;
                    comment.startPosition = selectionRange.start.column;
                    comment.endRow = selectionRange.end.row;
                    comment.endPosition = selectionRange.end.column;
                    comment.text = new String($("#comment").val());
                    comment.file = editor.file;

                    comment.uuid = generateUUID();

                    addToCommentsList(comment);
                    updateComments();

                    editor.getSession().addComment(comment);

                    editor.setValue(editor.getValue());
                    editor.getSelection().setSelectionRange(selectionRange);

                    $('#comment_footer').collapse("hide");

                    comment = null;
                    $('#comment').val("");
                    
                    $('#save_comments').text(needToSaveVal);
                });
            $('body').on('click',
                '#remove_comment',
                function(e) {
                    e.preventDefault();

                    if (!comment) {
                        return;
                    }

                    var uuid = comment.uuid;
                    editor.getSession().removeComment(comment);
                    editor.setValue(editor.getValue());
                    editor.getSelection().clearSelection();
                    $('#remove_comment').hide();
                    $('#comment_footer').collapse("hide");
                    comment = null;
                    $('#comment').val("");

                    for (var i = 0; i < commentsList.length; ++i) {
                        if (commentsList[i].comment.uuid == uuid) {
                            commentsList.splice(i, 1);
                            break;
                        }
                    }
                    updateComments();
                    $('#save_comments').text(needToSaveVal);
                });

            editor.getSession().selection.on('changeSelection',
                function(e) {
                    if (!editor.getSelection().isEmpty()) {
                        $('#comment_footer').collapse("show");
                    } else {
                        $('#remove_comment').hide();
                        $('#comment_footer').collapse("hide");
                        comment = null;
                        $('#comment').val("");
                    }
                });

            $('body').on('mouseenter',
                '.kacake_comment',
                function(event) {
                    console.log($(this).attr('data-comment-uuid'));
                });

            $('body').on('click',
                '.kacake_comment',
                function(event) {
                    var comment_uuid = $(this).attr('data-comment-uuid');
                    comment = editor.getSession().getComment(comment_uuid);
                    $('#comment').val(new String(comment.text));
                    $('#comment_footer').collapse("show");
                    $('#remove_comment').show();
                });

            $('body').on('click',
                '#cancel_comment',
                function() {
                    $('#remove_comment').hide();
                    $('#comment_footer').collapse("hide");
                    comment = null;
                    $('#comment').val("");
                });

            return editor;
        }

        $(".nav-tabs").on("click",
                "a",
                function(e) {
                    if (repl) {
                        repl.stop();
                        repl.disconnect();
                        repl = null;
                    }
                    e.preventDefault();
                    console.log($(this));
                    $(this).tab('show');
                })
            .on("click",
                "span",
                function() {
                    var anchor = $(this).siblings('a');

                    var id = anchor.attr('href').substr("#tab_".length);
                    editor = ace.edit("editor_" + id);
                    editor.destroy();

                    $(anchor.attr('href')).remove();
                    $(this).parent().remove();
                    $(".nav-tabs li").children('a').first().click();
                    delete tabs[id];

                    if ($(".nav-tabs").children().length == 0) {
                        $('#save_comments').collapse("hide");
                    }
                });

        function createTab(name, data) {
            var id = $(".nav-tabs").children().length;
            $(".nav-tabs").append('<li><a href="#tab_' +
                id +
                '">' +
                name +
                '</a><span class="glyphicon glyphicon-remove"></span></li>');
            $(".tab-content").append('<div class="tab-pane" id="tab_' +
                id +
                '"><div id="editor_' +
                id +
                '"></div></div>');

            console.log(data.text);
            var editor = setupEditor("editor_" + id, name);
            editor.setValue(data.text);
            if (data.comments) {
                var comments = JSON.parse(data.comments);
                for (var i in comments) {
                    editor.getSession().addComment(comments[i]);
                    console.log(comments[i]);
                }
            }
            editors[id] = editor;
            tabs[id] = name;

            $('.nav-tabs li').children('a').last().click();

            editor.selection.clearSelection();

            $('#comment_footer').collapse("hide");
        }

        function goToTab(filename, file) {
            var a = $(".nav-tabs li").children('a');
            for (var i = 0; i < a.length; ++i) {
                console.log(a[i]);
                var id = $(a[i]).attr('href').substr("#tab_".length);
                if (tabs[id] == filename) {
                    $(a[i]).click();
                    editor = editors[id];
                    return;
                }
            }

            createTab(filename, file);
        }

        function updateComments() {
            console.log("Updating list");
            $('#list').empty();
                    $('#list').treeview({
                    data: commentsList,
                    onNodeSelected: function (event, data) {
                        $.get("../GetFile/@Model.SubmissionId?file=" + encodeURI(data.comment.file),
                            function (result) {
                                goToTab(data.comment.file, result);
                                var comment_uuid = data.comment.uuid;
                                comment = editor.getSession().getComment(comment_uuid);
                                $('#comment').val(new String(comment.text));
                                $('#comment_footer').collapse("show");
                                $('#remove_comment').show();
                            }
                        );
                    }
                });

        }

        function addToCommentsList(c) {
            var cmnt = {
                text: c.text.length > 80 ? c.text.substr(0, 80) + "..." : c.text,
                icon: "glyphicon glyphicon-comment",
                backColor: "#b4b3a2",
                comment: c
            }
            commentsList.push(cmnt);
        }

        $('#tree').treeview({
            data: tree,
            onNodeSelected: function (event, data) {
                $.get("../GetFile/@Model.SubmissionId?file=" + encodeURI(data.file),
                    function (result) {
                        goToTab(data.file, result);
                    }
                );
            }
        });

        $.get("../GetAllComments/@Model.SubmissionId",
            function (result) {
                for (var i = 0; i < result.length; ++i) {
                    var c = result[i];
                    addToCommentsList(c);
                }

                updateComments();
            }
        );

    </script>
}